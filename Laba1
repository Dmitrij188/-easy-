import java.util.*;

class Student {
    private String name;
    private String group;
    private int course;
    private List<Integer> grades;

    public Student(String name, String group, int course, List<Integer> grades) {
        this.name = name;
        this.group = group;
        this.course = course;
        this.grades = grades;
    }

    public double getAverageGrade() {
        return grades.stream().mapToInt(Integer::intValue).average().orElse(0.0);
    }

    public int getCourse() {
        return course;
    }

    public void nextCourse() {
        if (course < 5) {
            course++;
        }
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name + " (группа " + group + ", курс " + course + ", средний балл: " + String.format("%.2f", getAverageGrade()) + ")";
    }

    public static List<Student> processStudents(List<Student> students) {
        List<Student> updatedList = new ArrayList<>();
        for (Student student : students) {
            if (student.getAverageGrade() >= 3) {
                student.nextCourse();
                updatedList.add(student);
            }
        }
        return updatedList;
    }

    public static void printStudents(List<Student> students, int course) {
        System.out.println("Студенты на " + course + " курсе:");
        students.stream()
                .filter(s -> s.getCourse() == course)
                .forEach(s -> System.out.println(s.getName()));
    }

    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();
        students.add(new Student("Иванов Иван", "Группа 101", 1, Arrays.asList(4, 5, 3, 4)));
        students.add(new Student("Петров Петр", "Группа 101", 1, Arrays.asList(2, 3, 2, 3)));
        students.add(new Student("Сидоров Алексей", "Группа 102", 2, Arrays.asList(5, 5, 4, 5)));
        students.add(new Student("Мария Васильева", "Группа 103", 3, Arrays.asList(3, 4, 3, 3)));

        System.out.println("Список студентов до обработки:");
        students.forEach(System.out::println);

        students = processStudents(students);

        System.out.println("\nСписок студентов после обработки:");
        students.forEach(System.out::println);

        System.out.println();
        printStudents(students, 2);
    }
}
